/**
* This file is part of ArbatParser application (check README).
* Copyright (C) 2012-2013 Stanislav Nepochatov
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
**/

package arbatparser;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 * Main window class.
 * @author Stanislav Nepochatov
 */
public class MainFrame extends javax.swing.JFrame {
    
    /**
     * Model for dir list.
     */
    private DefaultListModel dirListModel = new DefaultListModel();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }
    
    /**
     * Add single item in dir list.
     * @param name name of entry;
     */
    public void addToList(String name) {
        //System.out.println("Додоано: " + name);
        this.dirListModel.addElement(name);
    }
    
    /**
     * Link dir list to it's model (bug fix);
     */
    public void displayList() {
        this.dirList.setModel(dirListModel);
    }
            
    
    /**
     * Reset dir list.
     */
    public void resetList() {
        this.dirListModel.clear();
    }
    
    /**
     * Rebuild list with given array.
     * @param names array with names;
     */
    public void rebuildList(String[] names) {
        this.resetList();
        for (String currName: names) {
            this.dirListModel.addElement(currName);
        }
    }
    
    /**
     * Add new entry to dir list.
     * @param givenEntry new created filter entry;
     */
    public void addFilterEntry(FilterEntry givenEntry) {
        int currPos = this.dirList.getSelectedIndex();
        this.dirListModel.add(currPos + 1, givenEntry.getEntryName());
        ArbatParser.filterList.add(currPos + 1, givenEntry);
    }
    
    /**
     * Replace old entry by new edition.
     * @param givenEntry newer entry;
     */
    public void replaceFilterEntry(FilterEntry givenEntry) {
        int currPos = this.dirList.getSelectedIndex();
        this.dirListModel.remove(currPos);
        ArbatParser.filterList.remove(currPos);
        this.dirListModel.add(currPos, givenEntry.getEntryName());
        ArbatParser.filterList.add(currPos, givenEntry);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        dirList = new javax.swing.JList();
        addBut = new javax.swing.JButton();
        editBut = new javax.swing.JButton();
        delBut = new javax.swing.JButton();
        splitBut = new javax.swing.JButton();
        upBut = new javax.swing.JButton();
        downBut = new javax.swing.JButton();
        topBut = new javax.swing.JButton();
        lowBut = new javax.swing.JButton();
        exitBut = new javax.swing.JButton();
        cancelBut = new javax.swing.JButton();
        saveBut = new javax.swing.JButton();
        printBut = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Налаштування напрямків");

        dirList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dirList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dirListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(dirList);

        addBut.setText("Додати");
        addBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButActionPerformed(evt);
            }
        });

        editBut.setText("Редагувати");
        editBut.setEnabled(false);
        editBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButActionPerformed(evt);
            }
        });

        delBut.setText("Видалити");
        delBut.setToolTipText("");
        delBut.setEnabled(false);
        delBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButActionPerformed(evt);
            }
        });

        splitBut.setText("Роздільник");
        splitBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitButActionPerformed(evt);
            }
        });

        upBut.setText("▲");
        upBut.setToolTipText("Пересунути на одну позицію догори");
        upBut.setEnabled(false);
        upBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButActionPerformed(evt);
            }
        });

        downBut.setText("▼");
        downBut.setToolTipText("Пересунути на одну позиції донизу");
        downBut.setEnabled(false);
        downBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButActionPerformed(evt);
            }
        });

        topBut.setText("↑");
        topBut.setToolTipText("Пересунути нагору");
        topBut.setEnabled(false);
        topBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topButActionPerformed(evt);
            }
        });

        lowBut.setText("↓");
        lowBut.setToolTipText("Пересунути донизу");
        lowBut.setEnabled(false);
        lowBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowButActionPerformed(evt);
            }
        });

        exitBut.setText("Вийти");
        exitBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButActionPerformed(evt);
            }
        });

        cancelBut.setForeground(new java.awt.Color(51, 153, 0));
        cancelBut.setText("Відкинути зміни");
        cancelBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButActionPerformed(evt);
            }
        });

        saveBut.setForeground(new java.awt.Color(153, 0, 0));
        saveBut.setText("Зберігти зміни");
        saveBut.setToolTipText("");
        saveBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButActionPerformed(evt);
            }
        });

        printBut.setText("Переглянути код");
        printBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButActionPerformed(evt);
            }
        });

        jButton1.setText("?");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(saveBut)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                        .addComponent(printBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exitBut))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(upBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(downBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(topBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lowBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(delBut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addBut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(splitBut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editBut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(92, 92, 92)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(splitBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delBut)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(upBut)
                            .addComponent(topBut))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(downBut)
                            .addComponent(lowBut))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitBut)
                    .addComponent(cancelBut)
                    .addComponent(saveBut)
                    .addComponent(printBut))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void printButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButActionPerformed
        Runnable printRunner = new Runnable() {

            @Override
            public void run() {
                StringBuffer mainBuf = new StringBuffer();
                mainBuf.append(ArbatParser.getSystemHeader());
                for (int index = 0; index < ArbatParser.filterList.size(); index++) {
                    String currPrefix = String.valueOf(index + 1);
                    while (currPrefix.length() < 3) {
                        currPrefix = "0" + currPrefix;
                    }
                    mainBuf.append(ArbatParser.filterList.get(index).getCode(currPrefix));
                }
                PrintView viewer = new PrintView(MainFrame.this, false, mainBuf.toString());
                viewer.setVisible(true);
            }
            
        };
        ArbatParser.executor.execute(printRunner);
    }//GEN-LAST:event_printButActionPerformed

    private void addButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButActionPerformed
        EntryEditor editor = new EntryEditor(null);
        editor.setVisible(true);
    }//GEN-LAST:event_addButActionPerformed

    private void splitButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitButActionPerformed
        this.addFilterEntry(FilterEntry.getSplitter());
    }//GEN-LAST:event_splitButActionPerformed

    private void editButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButActionPerformed
        EntryEditor editor = new EntryEditor(ArbatParser.filterList.get(this.dirList.getSelectedIndex()));
        editor.setVisible(true);
    }//GEN-LAST:event_editButActionPerformed

    private void cancelButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButActionPerformed
        ArbatParser.filterList = new java.util.ArrayList<FilterEntry>();
        this.resetList();
        Runnable parseRunner = new Runnable() {

            @Override
            public void run() {
                ArbatParser.parseSetFile();
            }
            
        };
        ArbatParser.executor.execute(parseRunner);
    }//GEN-LAST:event_cancelButActionPerformed

    private void delButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButActionPerformed
        int currPos = this.dirList.getSelectedIndex();
        this.dirListModel.remove(currPos);
        ArbatParser.filterList.remove(currPos);
        if (ArbatParser.filterList.size() - 1 > currPos) {
            this.dirList.setSelectedIndex(currPos);
        } else {
            this.dirList.setSelectedIndex(currPos - 1);
        }
    }//GEN-LAST:event_delButActionPerformed

    private void dirListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dirListValueChanged
        if (this.dirList.getSelectedIndex() != -1) {
            this.editBut.setEnabled(true);
            this.delBut.setEnabled(true);
            this.upBut.setEnabled(true);
            this.downBut.setEnabled(true);
            this.topBut.setEnabled(true);
            this.lowBut.setEnabled(true);
        } else {
            if (!ArbatParser.filterList.get(this.dirList.getSelectedIndex()).іsCorrupted()) {
                this.editBut.setEnabled(false); //Prevent to edit corrupted entries. Deleting only.
            }
            this.delBut.setEnabled(false);
            this.upBut.setEnabled(false);
            this.downBut.setEnabled(false);
            this.topBut.setEnabled(false);
            this.lowBut.setEnabled(false);
        }
    }//GEN-LAST:event_dirListValueChanged

    private void upButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButActionPerformed
        int currPos = this.dirList.getSelectedIndex();
        if (currPos > 0) {
            this.dirListModel.remove(currPos);
            FilterEntry moved = ArbatParser.filterList.remove(currPos);
            this.dirListModel.add(currPos - 1 , moved.getEntryName());
            ArbatParser.filterList.add(currPos - 1, moved);
            this.dirList.setSelectedIndex(currPos - 1);
            this.dirList.ensureIndexIsVisible(currPos - 1);
        }
    }//GEN-LAST:event_upButActionPerformed

    private void downButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButActionPerformed
        int currPos = this.dirList.getSelectedIndex();
        if (currPos < ArbatParser.filterList.size() - 1) {
            this.dirListModel.remove(currPos);
            FilterEntry moved = ArbatParser.filterList.remove(currPos);
            this.dirListModel.add(currPos + 1, moved.getEntryName());
            ArbatParser.filterList.add(currPos + 1, moved);
            this.dirList.setSelectedIndex(currPos + 1);
            this.dirList.ensureIndexIsVisible(currPos + 1);
        }
    }//GEN-LAST:event_downButActionPerformed

    private void topButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topButActionPerformed
        int currPos = this.dirList.getSelectedIndex();
        if (currPos > 0) {
            this.dirListModel.remove(currPos);
            FilterEntry moved = ArbatParser.filterList.remove(currPos);
            this.dirListModel.add(0 , moved.getEntryName());
            ArbatParser.filterList.add(0, moved);
            this.dirList.setSelectedIndex(0);
            this.dirList.ensureIndexIsVisible(0);
        }
    }//GEN-LAST:event_topButActionPerformed

    private void lowButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowButActionPerformed
        int currPos = this.dirList.getSelectedIndex();
        if (currPos < ArbatParser.filterList.size() - 1) {
            this.dirListModel.remove(currPos);
            FilterEntry moved = ArbatParser.filterList.remove(currPos);
            int low = ArbatParser.filterList.size();
            this.dirListModel.add(low, moved.getEntryName());
            ArbatParser.filterList.add(low, moved);
            this.dirList.setSelectedIndex(low);
            this.dirList.ensureIndexIsVisible(low);
        }
    }//GEN-LAST:event_lowButActionPerformed

    private void saveButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButActionPerformed
        Runnable saveRunner = new Runnable() {

            @Override
            public void run() {
                ArbatParser.saveSetFile();
                JOptionPane.showMessageDialog(null, "Файл налаштуваннь вдало сбережено.", "Увага", JOptionPane.INFORMATION_MESSAGE);
            }
            
        };
        ArbatParser.executor.execute(saveRunner);
    }//GEN-LAST:event_saveButActionPerformed

    private void exitButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JOptionPane.showMessageDialog(null, "ArbatParser v0.1 (22-10-2013)\n\nСирцевий код утиліти росповсюджується на умовах ліцензії GNU GPLv2 (або більш нової редакції).\n\nАвтор: Непочатов Станіслав © 2013", "О ArbatParser", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBut;
    private javax.swing.JButton cancelBut;
    private javax.swing.JButton delBut;
    private javax.swing.JList dirList;
    private javax.swing.JButton downBut;
    private javax.swing.JButton editBut;
    private javax.swing.JButton exitBut;
    private javax.swing.JButton jButton1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton lowBut;
    private javax.swing.JButton printBut;
    private javax.swing.JButton saveBut;
    private javax.swing.JButton splitBut;
    private javax.swing.JButton topBut;
    private javax.swing.JButton upBut;
    // End of variables declaration//GEN-END:variables
}
